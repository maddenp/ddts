--------------------------------------------------------------------------------
DDTS
--------------------------------------------------------------------------------

Quick Start

  ddts <suite>                          : run the suite named <suite>
  ddts gen-baseline <dir> <suite>       : run <suite>, write baseline to <dir>
  ddts use-baseline <dir> <suite>       : run <suite>, compare to baseline <dir>
  ddts clean                            : remove most test-suite created items
  ddts help                             : shows this usage information
  ddts make-app [path]                  : create empty app ('./app' by default)
  ddts run [ gen-baseline <dir> ] <run> : do <run>, write baseline to <dir>
  ddts run [ use-baseline <dir> ] <run> : do <run>, compare to baseline <dir>
  ddts show build <build>               : show details of the build <build>
  ddts show builds                      : show names of available builds
  ddts show run <run>                   : show details of the run <run>
  ddts show runs                        : show names of available runs
  ddts show suite <suite>               : show details of the suite <suite>
  ddts show suites                      : show names of available suites
  ddts version                          : print version number and exit

* Note that either an 'app' directory must exist alongside the 'ddts' wrapper
  script, or the environment variable DDTSAPP must be defined (with the path to
  a directory containing the required 'build', 'run' and 'suite' subdirectories,
  each containing appropriate definition files, as its value) to run ddts. See
  the 'Definitions' section, below, for details.

  The 'make-app' command-line option can be used to generate an application
  skeleton suitable for extension. The option's argument is the name of a
  directory, which must not already exist, in which to create the skeleton. If
  no argument is supplied, the default is 'app', in the current directory.

--------------------------------------------------------------------------------
1. Baseline Creation / Comparison
--------------------------------------------------------------------------------

Run 'ddts gen-baseline <dir> <suite>' to create a baseline of the named suite. A
set of output from the suite's runs will be written to the directory named by
<dir>, which will be created if necessary. One subdirectory will be created
under <dir> for each unique 'ddts_baseline' value specified in the definitions
of the suite's various runs. These subdirectories must not already exist.

Run 'ddts use-baseline <dir> <suite>' to compare the output produced by a new
suite invocation to the existing baseline in <dir>.

A useful workflow might consist of these steps:

  1. Check out a fresh working copy.
  2. Run 'ddts gen-baseline <dir> <suite>' to generate a baseline.
  3. Make changes to the working copy as needed.
  4. Run 'ddts use-baseline <dir> <suite>' to verify your changes.

--------------------------------------------------------------------------------
2. Logging
--------------------------------------------------------------------------------

Each 'ddts' invocation that does not fail immediately generates a verbose log
file named 'log.timestamp', where timestamp is the seconds-since-epoch test-
suite start time. Logfiles are created under $DDTSAPP/logs (see the next section
for information on DDTSAPP).

--------------------------------------------------------------------------------
3. Definitions
--------------------------------------------------------------------------------

A DDTS application requires, in addition to the core driver in ddts.rb, the
following, which must appear either in a (possibly symlinked) directory named
'app', alongside ddts.rb; or in a directory named by the environment variable
'DDTSAPP' (where the latter, if defined, takes precedence):

- An implementation of library.rb. See below, and the example application in
  the directory 'ex', for reference.

- YAML build, run and suite definition files, in the 'builds', 'runs', and
  'suites' subdirectories, respectively, of the $DDTSAPP/defs directory.

The definition files in the 'builds', 'runs' and 'suites' directories are
expressed in YAML, and are parsed by the core driver and instantiated as hash
and array containers. An 'env' environment object is passed in as the first
argument to each library routine (see section 5). The 'build', 'run' and 'suite'
members of the env object expose the contents of their respective definitions --
as well as items that may be added by the library developer -- as OpenStruct
objects, for easy access.

Files not containing usable definitions (e.g. ones defining base settings meant
for extension) may be placed in 'abstract' subdirectories of 'builds', 'runs' or
'suites' to prevent their direct use or appearance in the output of the commands
'show builds', 'show runs' or 'show suites'.

Keys prefixed with 'ddts_' are reserved by the framework. Keys prefixed with
'lib_' are also reserved, and provide a mechanism for overriding library
routines.

3.1 Build Definitions
---------------------

Build definitions contain the information necessary to construct a command to
perform a build via the external build-automation system. Their content, then,
depends on the requirements of that system and the interface to it defined in
library routines. Like run definitions (see section 3.2, below), build
definitions can be composed via the 'ddts_extends' key.

3.2 Run Definitions
-------------------

Run definitions contain the information necessary to prepare, configure, execute
and verify runs; to associate them with baselines; etc. Definition
contents will depend on the model and platform, but several reserved top-level
keys are available to control framework behavior:

- [optional] The 'ddts_baseline' key specifies the name of a baseline directory
  into which this run's output should be copied (when baseline generation is
  requested), or against which it should be verified (when baseline comparison
  is requested). Runs whose output is expected to be identical should share a
  common 'ddts_baseline' value. Run definitions with no 'ddts_baseline' key do
  not participate in baseline generation or comparison.

- [required] The 'ddts_build' key specifies the name of the build (i.e. the
  filename of a build definition) to use for this run.

- [optional] The 'ddts_extends' key specifies the name of a run definition from
  which the current definition should inherit, and which it may override.
  Recursion is supported, but loops in the inheritance chain are fatal errors.

- [optional] The 'ddts_require' key specifies the name of a run or the names of
  runs on which this run depends. The value may be a scalar string (for a single
  required run), or an array of strings. A run will wait until its required runs
  have completed before starting, and may access those runs' results via the
  env.run.ddts_require_results key. Note that defining run dependencies makes
  dependent runs ineligible for single execution (i.e. via 'ddts run' command-
  line syntax), since their required run(s) will not, by definition, execute.
  Dependent runs should therefore only be executed via suites that also execute
  all required runs.

3.3 Suite Definitions
---------------------

Each outer, array element in a suite definition names a group of runs expected
to produce identical output, whose output will be compared together via some
comparator (bitwise identity, by default). Inner array elements are the names of
runs (i.e. filenames of run definitions).

Each outer, scalar element in a suite definition represents a suite-level
configuration parameter.

The following reserved keys (suite-level configuration paramters) are available:

- [optional] The 'ddts_build_only' key, defined with any true value, indicates
  that the builds required by the suite should be performed, but that all
  subsequent runs and comparisons should be skipped.

- [optional] The 'ddts_continue' key, defined with any true value, will allow
  the test suite to continue running even if some components (e.g. comparisons
  of output, or entire runs) fail.

- [optional] The 'ddts_retain_builds' key, defined with any true value, directs
  the core driver to rebuild over existing builds without deleting them first.
  This should generally be considered unsafe.

NOTE that any suite-definition items whose values are arrays will be interpreted
as run group definitions. Those whose values are scalars will be interpreted as
suite-level configuration parameters. Custom parameters may be be added, and
may be accessed via the env.suite object passed into library routines.

3.4 Other Reserved Keys
-----------------------

The following keys are also made available to library routines by the core
driver. Recommended library routines from which to access these keys are given.
Access may be possible from other routines, but access from other than the
recommended routines should handle errors (i.e. nil values).

- env.ddts_dlog: The delayed (file) logger object. Access recommended from
  routine lib_suite_post. For expert use only: Logging should be done via
  Utility routines logd and logi.

- env.ddts_ilog: The immediate (screen) logger object. Access recommended from
  routine lib_suite_post. For expert use only: Logging should be done via
  Utility routines logd and logi.

- env.build.ddts_result: The final value returned from lib_build_post. Access
  recommended from routines lib_run*.

- env.build.ddts_root: The path to a unique directory reserved for this build.
  It is recommended, but not required, that the build be performed under this
  directory, which will be created automatically by the core driver for use by
  library routines. Access recommended from routines lib_build*.

- env.run.ddts_name: The name of the run, as reported e.g. in log entries.
  Access recommended from routines lib_run*.

- env.run.ddts_require_results: A hash mapping the names of runs this run was
  defined to require to those runs' results.

- env.run.ddts_root: The path to a unique directory reserved for thsi run. It is
  recommended, but not required, that the run be performed under this directory,
  which will be created automatically by the core driver for use by library
  routines. Access recommended from routines lib_run*.

- env.suite.ddts_builds: A hash mapping each build name to an Openstruct object
  with the following members:

  .failed : true or false depending on whether the build succeeded or failed
  .result : the object returned by the build's lib_build_post routine

  Access recommended from routine lib_suite_post. This value is final only in
  lib_suite_post, and only for suite (not single-run) invocations.

- env.suite.ddts_runs: A hash mapping each run name to an OpenStruct object with
  the following members:

  .failed : true or false depending on whether the run succeeded or failed
  .files  : the file list returned by the run's lib_outfiles routine
  .result : the object returned by the run's lib_run_post routine

  Access recommended from routine lib_suite_post. This value is final only in
  lib_suite_post, and only for suite (not single-run) invocations.

- env.suite.ddts_suitename: The name of the running suite, as given on the
  command line. Access recommended from routines lib_suite*, and only for suite
  (not single-run) invocations.

- env.suite.ddts_totalfailures: The number of runs that failed, whether due to
  failed execution, run-vs-run comparison, or run-vs-baseline comparison. Access
  recommended from routine lib_suite_post. This value is final only in
  lib_suite_post, and only for suite (not single-run) invocations.

- env.suite.ddts_totalruns: The number of runs executed by the test suite.
  Access recommended from routine lib_suite_post. This value is final only in
  lib_suite_post, and only for suite (not single-run) invocations.

3.4 Controlling Array/Hash Inheritance
--------------------------------------

By default, the 'ddts_extends' mechanism merges Array and Hash objects. For
example, given definition c0

  key: [1,2]

and definition c1

  ddts_extends: c0
  key: [3,4]

The value of 'key' in c1 will be [1,2,3,4], as 'key' in c1 will extend 'key' in
c0. Similarly, Hash values will be merged, with key-value paris from ancestor
definitions perserved unless specifically overridden.

Alternatively, the YAML tag !replace can be used to suppress merging, allowing
the descendant's value to simply replace any ancestors'. Applied to the previous
example, c1 might be specified as

  key: !replace [3,4]

or

  key: !replace
    - 3
    - 4

so that the final value of 'key' in c1 will be [3,4].

The YAML tag !delete can be used to suppress inheritance. For example,

  key: !delete

will delete key 'key' that would otherwise be inherited from an ancestor.

Also,

  key:
    - !delete value

will delete 'value' from an inherited array. For example, for c0

  key:
    - a
    - b
    - c

and c1

  ddts_extends: c0
  key:
    - !delete b

the final value of c1 will be

  key:
    - a
    - c

--------------------------------------------------------------------------------
4. Quoting Rules for Fortran Namelists
--------------------------------------------------------------------------------

If namelist editing is to be performed, please note that, in general, values
recognized as strings in YAML are instantiated as Ruby String objects. Some
caveats:

- YAML casts some unquoted strings to primitive data types. For example, the
  unquoted word 'yes' will be instantiated as a Ruby 'true' boolean. There are
  a number of similar cases. When casting yields unwated behavior, explicitly
  quote the problematic value in the definition. A conservative solution is to
  quote all strings.

- The YAML library would normally print Ruby string objects without enclosing
  quotes, whether or not they are quoted in the definition. For example, values
  abc, 'abc' and "abc" would all be printed without quotes. The core driver
  adds single quotes around all String values when writing Fortran namelists
  so that, for the previous example, all three values would appear as 'abc'
  (i.e. in single quotes). Sometimes this isn't what's needed. For example,
  the Fortran primitive value .true. will be recognized by YAML as a string,
  but must appear unquoted in a namelist. To support this, a value may be
  preceded by the tag !unquoted in a YAML definition to suppress quoting of that
  value. For example, the YAML entries

    gribout: !unquoted  .true.
    gribout: !unquoted '.true.'
    gribout: !unquoted ".true."

  would all result in the Fortran namelist entry

    gribout=.true.

- Values recognized as numbers will be printed without quotes. If quotes are
  desired, explicitly quote the value in the definition so that it is recognized
  as a string.

--------------------------------------------------------------------------------
5. Library
--------------------------------------------------------------------------------

library.rb contains routines defining the interface between the framework and
the model and platform. Section 5.1, below, describes the routines called by the
core driver.

Library routines should not use instance variables. Communication with the core
driver or with other library routines should be done either via the passed-in
'env' object, or via the objects returned by certain library routines and passed
into others. Section 5.1 discusses the return values expected from library
routines and how they are used by the core driver.

The 'env' OpenStruct object has .build, .run and .suite members that expose the
contents of the respective definitions. Application developers may add
new members to env.[build|run|suite], or to env itself, as needed. Note that,
while changes made to the top-level env object and its .suite member from TS
objects (see call-order table in section 5.1) are visible in the subordinate
Comparison and Run objects, changes made by Comparison and Run objects are
confined to those objects and cannot be seen from other objects/threads.

5.1 Model/Platform Routines
---------------------------

These routines are called directly by the core driver. An environment object
(see section 3) is passed in as the first argument to each library routine. It
may be inspected in each routine to determine what information it contains.

A Library module with default (and mostly useless) implementations of these
routines is provided by defaults.rb, which is loaded automatically by the core
driver for all applications. If $DDTSAPP/library.rb exists, it will also be
loaded, with the routines contained in its Library module overriding those in
defaults.rb. Finally, as described below for each library routine, special keys
in suite, run and build definitions may override both library.rb and defaults.rb
definitions, specifying alternate routine names for each standard library
routine name. See the 'ex' application for examples.

The library routines are called in the following order:

 # Calling Object  Routine           Notes
-- -------------- ------------------ -------------------------------------------
 1 TS             lib_suite_prep
 2 Run            lib_build_prep
 3 Run            lib_build
 4 Run            lib_build_post
 5 Run            lib_data
 6 Run            lib_run_prep
 7 Run            lib_run
 8 Run            lib_run_post
 9 Run            lib_run_check
10 Run            lib_outfiles
11 Run            lib_comp           When 'use-baseline' is specified
12 Comparison     lib_comp           When comparison group contains > 1 run
13 TS             lib_suite_post

Additionally, lib_queue_del_cmd may be called asynchronously for any job whose
ID has been registered via a call to Utility#job_activate, in case of test-suite
failure.

Description of library routines:

lib_build(env,prepkit)

  Performs the build described by env.ddts_build.

  The 'prepkit' argument contains the object returned by lib_run_prep.

  Returns an arbitrary object, which is passed to lib_build_post; the object's
  type and value should be determined by the needs of that routine.

  May be aliased to an alternate library routine via the 'lib_build' key in a
  run definition.

lib_build_post(env,buildkit)

  Performs any actions necessary after a build completes.

  The object returned by the lib_build routine is received as the 'buildkit'
  argument.

  Returns an arbitrary object containing whatever is needed for a run to make
  use of the build results. For example, the object may contain (among other
  things), the path to a directory containing the runtime files necessary to
  perform a run. This object will be made available to each run using this build
  via env.build.ddts_result.

  If the build fails to return, env.build.ddts_result will contain the symbol
  :build_failed.

  May be aliased to an alternate library routine via the 'lib_build_post' key in
  a run definition.

lib_build_prep(env)

  Takes any actions required prior to performing a build.

  The env.build.ddts_root key returns a unique directory that may be used by
  this build.

  Returns an arbitrary object, which is passed to lib_build; the object's type
  and value should be determined by the needs of that routine.
  
  May be aliased to an alternate library routine via the 'lib_build_prep' key in
  a run definition.

lib_comp(env,file1,file2)

  Performs a comparison between file1 and file2.

  Returns true if comparison was deemed successful, false otherwise.

  May be aliased to an alternate library routine via the 'lib_comp' key in a run
  or suite definition. If lib_comp is left undefined, FileUtils.compare_file is
  to test for bitwise identity. NOTE: In a suite definition, the 'lib_comp' key
  must be specified in each comparison group that requires a special comparator,
  inline with the run names.

lib_data(env)

  Takes actions necessary to make input data available for the suite. Called
  once per test-suite invocation.

  Return value is unused.
  
  May be aliased to an alternate library routine via the 'lib_data' key in a run
  definition.

lib_outfiles(env,path)

  Returns an array containing the pathnames of the files that will be (1)
  added to this run's baseline if one is being produced; (2) compared against
  an existing baseline, if baseline comparison is being performed; and (3)
  compared against comparable runs. The 'path' argument specifies a directory
  under which the run's unique output can be found. Each entry in the returned
  array is in the form [path1,path2], where path1+path2 forms the absolute
  path to an output file, and path2 is the suffix of the path that is (a) the
  same across runs in the comparison group; and (b) what should be stored in a
  baseline.

  May be aliased to an alternate library routine via the 'lib_outfiles' key in a
  run definition.

lib_queue_del_cmd(env)

  Returns a string containing the name of the external program to run to delete
  a job from the queue system, given its ID as an argument.

  May be aliased to an alternate library routine via the 'lib_queue_del_cmd' key
  in a run definition.

lib_run(env,prepkit)

  Performs a run.

  The 'prepkit' argument contains the object returned by lib_build_prep.

  Returns an arbitrary object, which is passed to lib_run_post; the object's
  type and value should be determined by the needs of that routine.

  May be aliased to an alternate library routine via the 'lib_run' key in a run
  definition.

lib_run_check(env,postkit)

  If the run succeeded, returns the path to a directory under which the run's
  output can be found. The actual path returned should depend on what will be
  most useful to routine lib_outfiles. If the run failed, returns nil.

  The 'postkit' argument contains the object returned by the lib_run_post
  routine.

  May be aliased to an alternate library routine via the 'lib_run_check' key in
  a run definition.

lib_run_post(env,runkit)

  Takes any actions necessary following a successful run, before completion
  status is checked and the test suite proceeds to output comparision.

  The 'runkit' argument contains the object returned by the lib_run routine.

  Returns an arbitrary object, which is passed to lib_run_check; the object's
  type and value should be determined by the needs of that routine. Later, in
  lib_suite_post, this object can be retrieved by looking up this run's name in
  the env.suite.ddts_runs structure.

  May be aliased to an alternate library routine via the 'lib_run_post' key in a
  run definition.

lib_run_prep(env)

  Takes any actions required prior to starting a run.

  The env.run.ddts_root key returns a unique directory that may be used by this
  run.

  Returns an arbitrary object, which is passed to lib_run; the object's type and
  value should be determined by the needs of that routine.
  
  May be aliased to an alternate library routine via the 'lib_run_prep' key in a
  run definition.

lib_suite_post(env)

  Take any actions necessary after a successful test-suite execution.

  The passed-in env object has no .build or .run members, only .suite.

  Return value is unused.

  May be aliased to an alternate library routine via the 'lib_suite_post' key in
  a suite definition.

lib_suite_prep(env)

  Take any actions necessary prior to performance of the builds, runs and
  comparisons defined by the test suite.

  The passed-in env object has no .build or .run members, only .suite.

  Return value is unused.

  May be aliased to an alternate library routine via the 'lib_suite_prep' key in
  a suite definition.

Other routines useful to a specific model or platform may be added to library.rb
by the library developer, as needed. See uses of Utility#invoke in ddts.rb for
examples of how to override such custom routines via build, run and suite
definitions.

5.2 Utility Routines
--------------------

The core driver provides a number of utility routines that may be useful in the
implementation of library routines:

app_dir

  Returns the root path of the current application.

die(msg)

  Attempts to delete any jobs queued to the batch system, and prints/logs the
  (optional) 'msg' argument's String value. Terminates the test suite (unless
  'ddts_continue' mode is active) by raising an exception, and so does not
  return.

ext(cmd,props)

  Executes, in a subshell (/bin/sh under Linux), the command contained in the
  String 'cmd'. Returns a two-element Array composed of (1) an Array of the
  command's combined stdout and stderr streams, and (2) the command's integer
  exit status.

  The (optional) 'props' Hash may contain the following key/value pairs:

    :die

    Terminates the suite if the shell command sets a non-zero exit status.
    True by default.

    :msg

    If :die is true, :msg's String value will be printed/logged before exit.

    :out

    If :out is true, the shell command's output (combined stdout/stderr)
    will be logged to the verbose logfile (but not to the screen). True by
    default.

hash_matches(file,hash)

  Returns true if the MD5 checksum of the file identified by the 'file' String
  matches the MD5 checksum contained in String 'hash', and false otherwise.

home_dir

  Returns the root path of the test-suite core driver.

invoke(std,key,*args)

  Symbol argument 'std' names a library routine. Symbol argument 'key' names a
  definition type. The *args are the arguments to be passed to the named library
  routine (the first of *args MUST be the 'env' object). If the definition named
  by 'key' defines an alias for the routine named by 'std', it is called;
  otherwise, 'std' is called. In either case, *args are passed as arguments. For
  example, 'invoke(:lib_comp,:run,env,x)' would result in the call
  'lib_comp_alt(env,x)' if the run definition contained 'lib_comp: lib_comp_alt'.

job_activate(jobid,run)

  Register's the given 'jobid' as having been submitted to the batch system
  for the Run objet referenced by the 'run' argument. The list of registered
  job IDs is used to delete jobs from the batch system when the test suite
  fails. The supplied job ID should be the appropriate argument to the program
  identified by the lib_queue_del_cmd library routine.

job_check(stdout,restr)

  Returns true if a regular expression instantiated from the 'restr' String
  argument matches any line in the file identified by the 'stdout' argument,
  and false otherwise.

job_deactivate(jobid)

  De-registers the given 'jobid' from the list of batch-system jobs. See
  job_activate(), above, for more information.

logd(msg)

  Log the 'msg' argument's String value to the delayed (file) logger.

logfile

  Returns the path to the logfile.

logi(msg)

  Log the 'msg' argument's String value to the immediate (screen) logger, and
  to the delayed (file) logger.

logw(msg)

  Like logi(), but prefixes 'msg' with the text "WARNING!" and, on successful
  completion of the test suite, prints/logs a reminder about the warning. It
  may be useful to warn users about issues not deemed serious enough to halt
  the test suite.

tmp_dir

  The path to a temporary directory, created by the core driver and removed by
  the 'clean' command-line command, to be used for temporary-storage purposes.

valid_dir(dir)

  A convenience wrapper to ensure that the directory named by argument 'dir'
  actually exists. Calls die() with an appropriate message if the directory
  does not exist. For example, 'd=valid_dir(File.join(a,b,c))' would set 'd'
  if the path constructed from 'a', 'b' and 'c' exists, and would otherwise
  die.

valid_file(file)

  Same as valid_dir(), but for a file argument.

--------------------------------------------------------------------------------
6. Environment Variables
--------------------------------------------------------------------------------

In addition to DDTSAPP, discussed above, the following environment variables are
used by ddts:

DDTSHOME: Specifies the path to the root directory of the ddts installation. It
is set automatically by the 'ddts' wrapper script.

DDTSOUT: Specifies the directory into which all automatically-generated test-
suite output should be written. If DDTSOUT is not set, DDTSAPP's value is used.

--------------------------------------------------------------------------------
6. Override Syntax
--------------------------------------------------------------------------------

DDTS provides an experimental syntax, usable in YAML definition files or from
the command line, for overriding elements of definitions without creating new
definition files. In either context, a run or suite definition name may be
followed by a slash character and a comma-separated list of key-value pairs
specifying changes to be applied to definition after it is read from disk.

For example, the invocation

  % DDTSAPP=ex ddts run ex_1/n=20000,tasks=2

would execute the 'ex' application's 'ex_1' run, but with the variable 'n' set
to '20000' and 'tasks' set to '2', instead of '10000' and '1', respectively, as
specificed in the run's on-disk definition.

The !delete, !replace and !unqoted flags may be used. For example,

  % DDTSAPP=ex ddts run ex_1/message='!replace ["Hello","World"]'

would replace the 'message' variable's original value with the specified new
array -- instead of merging the original and new arrays, as would otherwise
happen.

Standard disclaimers about shell interpretation of special characters and quotes
on the command line apply. Some experimentation may be required for all but the
simplest cases, so use of the DDTS 'show' command may be helpful. For example,

  % DDTSAPP=ex ddts show suite ex_suite/ddts_continue=true

would show that the override syntax correctly enables the ddts_continue option
for the 'ex_suite' suite, suggesting that the invocation

  % DDTSAPP=ex ddts ex_suite/ddts_continue=true

would indeed execute 'ex_suite' in continue mode.

Since an overridden definition should not be confused with its canonical form,
the framework appends a unique suffix to overriden names:

  % DDTSAPP=ex ddts run ex_1/n=20000,tasks=2
  ddts: Invocation timestamp is 1423270682
  Run ex_1_v1: Assigning name 'ex_1_v1' to run 'ex_1/n=20000,tasks=2'
  Run ex_1_v1: Build ex_build started
  Run ex_1_v1: Build ex_build completed
  Run ex_1_v1: Started
  Run ex_1_v1: Running case ex_1
  Run ex_1_v1: Completed

Here, the framework has named the overriden run 'ex_1_v1' and has reported this
fact. This is necessary, in particular, for suite definitions of the form

  group:
    - some_run/n=1,s='a'
    - some_run/n=2,s='b'
    - some_run/n=3,s='c'

Without the name change, a conflict between the names of the runs and, in turn,
the names of the execution directories created for each of the (distinct) runs,
would exist.

NB: Some complex definitions may not be expressible in override syntax.
